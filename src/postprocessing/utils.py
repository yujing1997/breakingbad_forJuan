from typing import List

import numpy as np
import SimpleITK as sitk

def pad(volume_to_pad:sitk.Image, spacing, size, origin, direction, interpolator=sitk.sitkNearestNeighbor):
    resampler = sitk.ResampleImageFilter()
    resampler.SetOutputSpacing(spacing)
    resampler.SetSize(size)
    resampler.SetInterpolator(interpolator)
    resampler.SetOutputOrigin(origin)
    resampler.SetOutputDirection(direction)
    return resampler.Execute(volume_to_pad)



def edit_label_metadata(image: sitk.Image, names_mapping: dict):
    """
    This function allows to have meaningful names when opening an sitk volume on 3D Slicer.
    """
    # If the mapping goes from class name to number we reverse the dictionnary
    if all(isinstance(class_, int) for class_ in list(names_mapping.values())):
        mapping = {
            v: k for k, v in names_mapping.items()
        }
    else:
        mapping = names_mapping.copy()

    array = sitk.GetArrayFromImage(image)
    labels_nb = list(np.unique(array))
    assert 0 in labels_nb, "This function assumes that the background is labeled as 0"
    # Background should not be in the labels otherwise it will hide the medical image
    labels_nb.remove(0)
    for slicer_idx, class_present in enumerate(labels_nb):
        if isinstance(mapping[class_present], List):
            name = "+".join(mapping[class_present])
        else:
            name = mapping[class_present]
        tags = [
            (f"Segment{slicer_idx}_ID", f"Segment_{class_present}"),
            (f"Segment{slicer_idx}_LabelValue", f"{class_present}"),
            (f"Segment{slicer_idx}_Layer", "0"),
            (
                f"Segment{slicer_idx}_Name",
                f"{name}",
            ),
            (f"Segment{slicer_idx}_NameAutoGenerated", "0"),
        ]
        for tag in tags:
            image.SetMetaData(tag[0], tag[1])
    return image

